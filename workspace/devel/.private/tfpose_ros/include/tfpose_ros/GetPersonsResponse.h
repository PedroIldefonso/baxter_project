// Generated by gencpp from file tfpose_ros/GetPersonsResponse.msg
// DO NOT EDIT!


#ifndef TFPOSE_ROS_MESSAGE_GETPERSONSRESPONSE_H
#define TFPOSE_ROS_MESSAGE_GETPERSONSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tfpose_ros/Persons.h>

namespace tfpose_ros
{
template <class ContainerAllocator>
struct GetPersonsResponse_
{
  typedef GetPersonsResponse_<ContainerAllocator> Type;

  GetPersonsResponse_()
    : persons()  {
    }
  GetPersonsResponse_(const ContainerAllocator& _alloc)
    : persons(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tfpose_ros::Persons_<ContainerAllocator>  _persons_type;
  _persons_type persons;





  typedef boost::shared_ptr< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPersonsResponse_

typedef ::tfpose_ros::GetPersonsResponse_<std::allocator<void> > GetPersonsResponse;

typedef boost::shared_ptr< ::tfpose_ros::GetPersonsResponse > GetPersonsResponsePtr;
typedef boost::shared_ptr< ::tfpose_ros::GetPersonsResponse const> GetPersonsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tfpose_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tfpose_ros': ['/home/pedroildefonso/baxter_project/workspace/src/tf-pose-estimation/msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "203abe0ab4f79d69cd66aee40fe396ce";
  }

  static const char* value(const ::tfpose_ros::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x203abe0ab4f79d69ULL;
  static const uint64_t static_value2 = 0xcd66aee40fe396ceULL;
};

template<class ContainerAllocator>
struct DataType< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tfpose_ros/GetPersonsResponse";
  }

  static const char* value(const ::tfpose_ros::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Persons persons\n\
\n\
================================================================================\n\
MSG: tfpose_ros/Persons\n\
Person[] persons\n\
uint32 image_w\n\
uint32 image_h\n\
Header header\n\
================================================================================\n\
MSG: tfpose_ros/Person\n\
BodyPartElm[] body_part\n\
uint32 person_id\n\
================================================================================\n\
MSG: tfpose_ros/BodyPartElm\n\
uint32 part_id\n\
float32 x\n\
float32 y\n\
float32 confidence\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::tfpose_ros::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.persons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPersonsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tfpose_ros::GetPersonsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tfpose_ros::GetPersonsResponse_<ContainerAllocator>& v)
  {
    s << indent << "persons: ";
    s << std::endl;
    Printer< ::tfpose_ros::Persons_<ContainerAllocator> >::stream(s, indent + "  ", v.persons);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TFPOSE_ROS_MESSAGE_GETPERSONSRESPONSE_H
