// Generated by gencpp from file tfpose_ros/Person3D.msg
// DO NOT EDIT!


#ifndef TFPOSE_ROS_MESSAGE_PERSON3D_H
#define TFPOSE_ROS_MESSAGE_PERSON3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>
#include <tfpose_ros/BodyPartElm3D.h>

namespace tfpose_ros
{
template <class ContainerAllocator>
struct Person3D_
{
  typedef Person3D_<ContainerAllocator> Type;

  Person3D_()
    : person_id(0)
    , nose()
    , neck()
    , right_shoulder()
    , right_elbow()
    , right_wrist()
    , left_shoulder()
    , left_elbow()
    , left_wrist()
    , right_hip()
    , right_knee()
    , right_ankle()
    , left_hip()
    , left_knee()
    , left_ankle()
    , right_eye()
    , left_eye()
    , right_ear()
    , left_ear()  {
    }
  Person3D_(const ContainerAllocator& _alloc)
    : person_id(0)
    , nose(_alloc)
    , neck(_alloc)
    , right_shoulder(_alloc)
    , right_elbow(_alloc)
    , right_wrist(_alloc)
    , left_shoulder(_alloc)
    , left_elbow(_alloc)
    , left_wrist(_alloc)
    , right_hip(_alloc)
    , right_knee(_alloc)
    , right_ankle(_alloc)
    , left_hip(_alloc)
    , left_knee(_alloc)
    , left_ankle(_alloc)
    , right_eye(_alloc)
    , left_eye(_alloc)
    , right_ear(_alloc)
    , left_ear(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _person_id_type;
  _person_id_type person_id;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _nose_type;
  _nose_type nose;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _neck_type;
  _neck_type neck;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_shoulder_type;
  _right_shoulder_type right_shoulder;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_elbow_type;
  _right_elbow_type right_elbow;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_wrist_type;
  _right_wrist_type right_wrist;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_shoulder_type;
  _left_shoulder_type left_shoulder;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_elbow_type;
  _left_elbow_type left_elbow;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_wrist_type;
  _left_wrist_type left_wrist;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_hip_type;
  _right_hip_type right_hip;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_knee_type;
  _right_knee_type right_knee;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_ankle_type;
  _right_ankle_type right_ankle;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_hip_type;
  _left_hip_type left_hip;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_knee_type;
  _left_knee_type left_knee;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_ankle_type;
  _left_ankle_type left_ankle;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_eye_type;
  _right_eye_type right_eye;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_eye_type;
  _left_eye_type left_eye;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _right_ear_type;
  _right_ear_type right_ear;

   typedef  ::tfpose_ros::BodyPartElm3D_<ContainerAllocator>  _left_ear_type;
  _left_ear_type left_ear;





  typedef boost::shared_ptr< ::tfpose_ros::Person3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tfpose_ros::Person3D_<ContainerAllocator> const> ConstPtr;

}; // struct Person3D_

typedef ::tfpose_ros::Person3D_<std::allocator<void> > Person3D;

typedef boost::shared_ptr< ::tfpose_ros::Person3D > Person3DPtr;
typedef boost::shared_ptr< ::tfpose_ros::Person3D const> Person3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tfpose_ros::Person3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tfpose_ros::Person3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tfpose_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tfpose_ros': ['/home/pedroildefonso/baxter_project/workspace/src/tf-pose-estimation/msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tfpose_ros::Person3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tfpose_ros::Person3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfpose_ros::Person3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfpose_ros::Person3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfpose_ros::Person3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfpose_ros::Person3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tfpose_ros::Person3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3bb1866b0d155de0421df7093a0acd3";
  }

  static const char* value(const ::tfpose_ros::Person3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3bb1866b0d155deULL;
  static const uint64_t static_value2 = 0x0421df7093a0acd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tfpose_ros::Person3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tfpose_ros/Person3D";
  }

  static const char* value(const ::tfpose_ros::Person3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tfpose_ros::Person3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 person_id\n\
BodyPartElm3D nose\n\
BodyPartElm3D neck\n\
BodyPartElm3D right_shoulder\n\
BodyPartElm3D right_elbow\n\
BodyPartElm3D right_wrist\n\
BodyPartElm3D left_shoulder\n\
BodyPartElm3D left_elbow\n\
BodyPartElm3D left_wrist\n\
BodyPartElm3D right_hip\n\
BodyPartElm3D right_knee\n\
BodyPartElm3D right_ankle\n\
BodyPartElm3D left_hip\n\
BodyPartElm3D left_knee\n\
BodyPartElm3D left_ankle\n\
BodyPartElm3D right_eye\n\
BodyPartElm3D left_eye\n\
BodyPartElm3D right_ear\n\
BodyPartElm3D left_ear\n\
================================================================================\n\
MSG: tfpose_ros/BodyPartElm3D\n\
uint32 part_id\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 confidence\n\
";
  }

  static const char* value(const ::tfpose_ros::Person3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tfpose_ros::Person3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person_id);
      stream.next(m.nose);
      stream.next(m.neck);
      stream.next(m.right_shoulder);
      stream.next(m.right_elbow);
      stream.next(m.right_wrist);
      stream.next(m.left_shoulder);
      stream.next(m.left_elbow);
      stream.next(m.left_wrist);
      stream.next(m.right_hip);
      stream.next(m.right_knee);
      stream.next(m.right_ankle);
      stream.next(m.left_hip);
      stream.next(m.left_knee);
      stream.next(m.left_ankle);
      stream.next(m.right_eye);
      stream.next(m.left_eye);
      stream.next(m.right_ear);
      stream.next(m.left_ear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tfpose_ros::Person3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tfpose_ros::Person3D_<ContainerAllocator>& v)
  {
    s << indent << "person_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.person_id);
    s << indent << "nose: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.nose);
    s << indent << "neck: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.neck);
    s << indent << "right_shoulder: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_shoulder);
    s << indent << "right_elbow: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_elbow);
    s << indent << "right_wrist: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_wrist);
    s << indent << "left_shoulder: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_shoulder);
    s << indent << "left_elbow: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_elbow);
    s << indent << "left_wrist: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_wrist);
    s << indent << "right_hip: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_hip);
    s << indent << "right_knee: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_knee);
    s << indent << "right_ankle: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_ankle);
    s << indent << "left_hip: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_hip);
    s << indent << "left_knee: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_knee);
    s << indent << "left_ankle: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_ankle);
    s << indent << "right_eye: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye);
    s << indent << "left_eye: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye);
    s << indent << "right_ear: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.right_ear);
    s << indent << "left_ear: ";
    s << std::endl;
    Printer< ::tfpose_ros::BodyPartElm3D_<ContainerAllocator> >::stream(s, indent + "  ", v.left_ear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TFPOSE_ROS_MESSAGE_PERSON3D_H
