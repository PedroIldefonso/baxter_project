# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tfpose_ros/Person3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tfpose_ros.msg

class Person3D(genpy.Message):
  _md5sum = "d3bb1866b0d155de0421df7093a0acd3"
  _type = "tfpose_ros/Person3D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 person_id
BodyPartElm3D nose
BodyPartElm3D neck
BodyPartElm3D right_shoulder
BodyPartElm3D right_elbow
BodyPartElm3D right_wrist
BodyPartElm3D left_shoulder
BodyPartElm3D left_elbow
BodyPartElm3D left_wrist
BodyPartElm3D right_hip
BodyPartElm3D right_knee
BodyPartElm3D right_ankle
BodyPartElm3D left_hip
BodyPartElm3D left_knee
BodyPartElm3D left_ankle
BodyPartElm3D right_eye
BodyPartElm3D left_eye
BodyPartElm3D right_ear
BodyPartElm3D left_ear
================================================================================
MSG: tfpose_ros/BodyPartElm3D
uint32 part_id
float32 x
float32 y
float32 z
float32 confidence"""
  __slots__ = ['person_id','nose','neck','right_shoulder','right_elbow','right_wrist','left_shoulder','left_elbow','left_wrist','right_hip','right_knee','right_ankle','left_hip','left_knee','left_ankle','right_eye','left_eye','right_ear','left_ear']
  _slot_types = ['uint32','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D','tfpose_ros/BodyPartElm3D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       person_id,nose,neck,right_shoulder,right_elbow,right_wrist,left_shoulder,left_elbow,left_wrist,right_hip,right_knee,right_ankle,left_hip,left_knee,left_ankle,right_eye,left_eye,right_ear,left_ear

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Person3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.person_id is None:
        self.person_id = 0
      if self.nose is None:
        self.nose = tfpose_ros.msg.BodyPartElm3D()
      if self.neck is None:
        self.neck = tfpose_ros.msg.BodyPartElm3D()
      if self.right_shoulder is None:
        self.right_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.right_elbow is None:
        self.right_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.right_wrist is None:
        self.right_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.left_shoulder is None:
        self.left_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.left_elbow is None:
        self.left_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.left_wrist is None:
        self.left_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.right_hip is None:
        self.right_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.right_knee is None:
        self.right_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ankle is None:
        self.right_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.left_hip is None:
        self.left_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.left_knee is None:
        self.left_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ankle is None:
        self.left_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.right_eye is None:
        self.right_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.left_eye is None:
        self.left_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ear is None:
        self.right_ear = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ear is None:
        self.left_ear = tfpose_ros.msg.BodyPartElm3D()
    else:
      self.person_id = 0
      self.nose = tfpose_ros.msg.BodyPartElm3D()
      self.neck = tfpose_ros.msg.BodyPartElm3D()
      self.right_shoulder = tfpose_ros.msg.BodyPartElm3D()
      self.right_elbow = tfpose_ros.msg.BodyPartElm3D()
      self.right_wrist = tfpose_ros.msg.BodyPartElm3D()
      self.left_shoulder = tfpose_ros.msg.BodyPartElm3D()
      self.left_elbow = tfpose_ros.msg.BodyPartElm3D()
      self.left_wrist = tfpose_ros.msg.BodyPartElm3D()
      self.right_hip = tfpose_ros.msg.BodyPartElm3D()
      self.right_knee = tfpose_ros.msg.BodyPartElm3D()
      self.right_ankle = tfpose_ros.msg.BodyPartElm3D()
      self.left_hip = tfpose_ros.msg.BodyPartElm3D()
      self.left_knee = tfpose_ros.msg.BodyPartElm3D()
      self.left_ankle = tfpose_ros.msg.BodyPartElm3D()
      self.right_eye = tfpose_ros.msg.BodyPartElm3D()
      self.left_eye = tfpose_ros.msg.BodyPartElm3D()
      self.right_ear = tfpose_ros.msg.BodyPartElm3D()
      self.left_ear = tfpose_ros.msg.BodyPartElm3D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f().pack(_x.person_id, _x.nose.part_id, _x.nose.x, _x.nose.y, _x.nose.z, _x.nose.confidence, _x.neck.part_id, _x.neck.x, _x.neck.y, _x.neck.z, _x.neck.confidence, _x.right_shoulder.part_id, _x.right_shoulder.x, _x.right_shoulder.y, _x.right_shoulder.z, _x.right_shoulder.confidence, _x.right_elbow.part_id, _x.right_elbow.x, _x.right_elbow.y, _x.right_elbow.z, _x.right_elbow.confidence, _x.right_wrist.part_id, _x.right_wrist.x, _x.right_wrist.y, _x.right_wrist.z, _x.right_wrist.confidence, _x.left_shoulder.part_id, _x.left_shoulder.x, _x.left_shoulder.y, _x.left_shoulder.z, _x.left_shoulder.confidence, _x.left_elbow.part_id, _x.left_elbow.x, _x.left_elbow.y, _x.left_elbow.z, _x.left_elbow.confidence, _x.left_wrist.part_id, _x.left_wrist.x, _x.left_wrist.y, _x.left_wrist.z, _x.left_wrist.confidence, _x.right_hip.part_id, _x.right_hip.x, _x.right_hip.y, _x.right_hip.z, _x.right_hip.confidence, _x.right_knee.part_id, _x.right_knee.x, _x.right_knee.y, _x.right_knee.z, _x.right_knee.confidence, _x.right_ankle.part_id, _x.right_ankle.x, _x.right_ankle.y, _x.right_ankle.z, _x.right_ankle.confidence, _x.left_hip.part_id, _x.left_hip.x, _x.left_hip.y, _x.left_hip.z, _x.left_hip.confidence, _x.left_knee.part_id, _x.left_knee.x, _x.left_knee.y, _x.left_knee.z, _x.left_knee.confidence, _x.left_ankle.part_id, _x.left_ankle.x, _x.left_ankle.y, _x.left_ankle.z, _x.left_ankle.confidence, _x.right_eye.part_id, _x.right_eye.x, _x.right_eye.y, _x.right_eye.z, _x.right_eye.confidence, _x.left_eye.part_id, _x.left_eye.x, _x.left_eye.y, _x.left_eye.z, _x.left_eye.confidence, _x.right_ear.part_id, _x.right_ear.x, _x.right_ear.y, _x.right_ear.z, _x.right_ear.confidence, _x.left_ear.part_id, _x.left_ear.x, _x.left_ear.y, _x.left_ear.z, _x.left_ear.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.nose is None:
        self.nose = tfpose_ros.msg.BodyPartElm3D()
      if self.neck is None:
        self.neck = tfpose_ros.msg.BodyPartElm3D()
      if self.right_shoulder is None:
        self.right_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.right_elbow is None:
        self.right_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.right_wrist is None:
        self.right_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.left_shoulder is None:
        self.left_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.left_elbow is None:
        self.left_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.left_wrist is None:
        self.left_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.right_hip is None:
        self.right_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.right_knee is None:
        self.right_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ankle is None:
        self.right_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.left_hip is None:
        self.left_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.left_knee is None:
        self.left_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ankle is None:
        self.left_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.right_eye is None:
        self.right_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.left_eye is None:
        self.left_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ear is None:
        self.right_ear = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ear is None:
        self.left_ear = tfpose_ros.msg.BodyPartElm3D()
      end = 0
      _x = self
      start = end
      end += 364
      (_x.person_id, _x.nose.part_id, _x.nose.x, _x.nose.y, _x.nose.z, _x.nose.confidence, _x.neck.part_id, _x.neck.x, _x.neck.y, _x.neck.z, _x.neck.confidence, _x.right_shoulder.part_id, _x.right_shoulder.x, _x.right_shoulder.y, _x.right_shoulder.z, _x.right_shoulder.confidence, _x.right_elbow.part_id, _x.right_elbow.x, _x.right_elbow.y, _x.right_elbow.z, _x.right_elbow.confidence, _x.right_wrist.part_id, _x.right_wrist.x, _x.right_wrist.y, _x.right_wrist.z, _x.right_wrist.confidence, _x.left_shoulder.part_id, _x.left_shoulder.x, _x.left_shoulder.y, _x.left_shoulder.z, _x.left_shoulder.confidence, _x.left_elbow.part_id, _x.left_elbow.x, _x.left_elbow.y, _x.left_elbow.z, _x.left_elbow.confidence, _x.left_wrist.part_id, _x.left_wrist.x, _x.left_wrist.y, _x.left_wrist.z, _x.left_wrist.confidence, _x.right_hip.part_id, _x.right_hip.x, _x.right_hip.y, _x.right_hip.z, _x.right_hip.confidence, _x.right_knee.part_id, _x.right_knee.x, _x.right_knee.y, _x.right_knee.z, _x.right_knee.confidence, _x.right_ankle.part_id, _x.right_ankle.x, _x.right_ankle.y, _x.right_ankle.z, _x.right_ankle.confidence, _x.left_hip.part_id, _x.left_hip.x, _x.left_hip.y, _x.left_hip.z, _x.left_hip.confidence, _x.left_knee.part_id, _x.left_knee.x, _x.left_knee.y, _x.left_knee.z, _x.left_knee.confidence, _x.left_ankle.part_id, _x.left_ankle.x, _x.left_ankle.y, _x.left_ankle.z, _x.left_ankle.confidence, _x.right_eye.part_id, _x.right_eye.x, _x.right_eye.y, _x.right_eye.z, _x.right_eye.confidence, _x.left_eye.part_id, _x.left_eye.x, _x.left_eye.y, _x.left_eye.z, _x.left_eye.confidence, _x.right_ear.part_id, _x.right_ear.x, _x.right_ear.y, _x.right_ear.z, _x.right_ear.confidence, _x.left_ear.part_id, _x.left_ear.x, _x.left_ear.y, _x.left_ear.z, _x.left_ear.confidence,) = _get_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f().pack(_x.person_id, _x.nose.part_id, _x.nose.x, _x.nose.y, _x.nose.z, _x.nose.confidence, _x.neck.part_id, _x.neck.x, _x.neck.y, _x.neck.z, _x.neck.confidence, _x.right_shoulder.part_id, _x.right_shoulder.x, _x.right_shoulder.y, _x.right_shoulder.z, _x.right_shoulder.confidence, _x.right_elbow.part_id, _x.right_elbow.x, _x.right_elbow.y, _x.right_elbow.z, _x.right_elbow.confidence, _x.right_wrist.part_id, _x.right_wrist.x, _x.right_wrist.y, _x.right_wrist.z, _x.right_wrist.confidence, _x.left_shoulder.part_id, _x.left_shoulder.x, _x.left_shoulder.y, _x.left_shoulder.z, _x.left_shoulder.confidence, _x.left_elbow.part_id, _x.left_elbow.x, _x.left_elbow.y, _x.left_elbow.z, _x.left_elbow.confidence, _x.left_wrist.part_id, _x.left_wrist.x, _x.left_wrist.y, _x.left_wrist.z, _x.left_wrist.confidence, _x.right_hip.part_id, _x.right_hip.x, _x.right_hip.y, _x.right_hip.z, _x.right_hip.confidence, _x.right_knee.part_id, _x.right_knee.x, _x.right_knee.y, _x.right_knee.z, _x.right_knee.confidence, _x.right_ankle.part_id, _x.right_ankle.x, _x.right_ankle.y, _x.right_ankle.z, _x.right_ankle.confidence, _x.left_hip.part_id, _x.left_hip.x, _x.left_hip.y, _x.left_hip.z, _x.left_hip.confidence, _x.left_knee.part_id, _x.left_knee.x, _x.left_knee.y, _x.left_knee.z, _x.left_knee.confidence, _x.left_ankle.part_id, _x.left_ankle.x, _x.left_ankle.y, _x.left_ankle.z, _x.left_ankle.confidence, _x.right_eye.part_id, _x.right_eye.x, _x.right_eye.y, _x.right_eye.z, _x.right_eye.confidence, _x.left_eye.part_id, _x.left_eye.x, _x.left_eye.y, _x.left_eye.z, _x.left_eye.confidence, _x.right_ear.part_id, _x.right_ear.x, _x.right_ear.y, _x.right_ear.z, _x.right_ear.confidence, _x.left_ear.part_id, _x.left_ear.x, _x.left_ear.y, _x.left_ear.z, _x.left_ear.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.nose is None:
        self.nose = tfpose_ros.msg.BodyPartElm3D()
      if self.neck is None:
        self.neck = tfpose_ros.msg.BodyPartElm3D()
      if self.right_shoulder is None:
        self.right_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.right_elbow is None:
        self.right_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.right_wrist is None:
        self.right_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.left_shoulder is None:
        self.left_shoulder = tfpose_ros.msg.BodyPartElm3D()
      if self.left_elbow is None:
        self.left_elbow = tfpose_ros.msg.BodyPartElm3D()
      if self.left_wrist is None:
        self.left_wrist = tfpose_ros.msg.BodyPartElm3D()
      if self.right_hip is None:
        self.right_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.right_knee is None:
        self.right_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ankle is None:
        self.right_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.left_hip is None:
        self.left_hip = tfpose_ros.msg.BodyPartElm3D()
      if self.left_knee is None:
        self.left_knee = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ankle is None:
        self.left_ankle = tfpose_ros.msg.BodyPartElm3D()
      if self.right_eye is None:
        self.right_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.left_eye is None:
        self.left_eye = tfpose_ros.msg.BodyPartElm3D()
      if self.right_ear is None:
        self.right_ear = tfpose_ros.msg.BodyPartElm3D()
      if self.left_ear is None:
        self.left_ear = tfpose_ros.msg.BodyPartElm3D()
      end = 0
      _x = self
      start = end
      end += 364
      (_x.person_id, _x.nose.part_id, _x.nose.x, _x.nose.y, _x.nose.z, _x.nose.confidence, _x.neck.part_id, _x.neck.x, _x.neck.y, _x.neck.z, _x.neck.confidence, _x.right_shoulder.part_id, _x.right_shoulder.x, _x.right_shoulder.y, _x.right_shoulder.z, _x.right_shoulder.confidence, _x.right_elbow.part_id, _x.right_elbow.x, _x.right_elbow.y, _x.right_elbow.z, _x.right_elbow.confidence, _x.right_wrist.part_id, _x.right_wrist.x, _x.right_wrist.y, _x.right_wrist.z, _x.right_wrist.confidence, _x.left_shoulder.part_id, _x.left_shoulder.x, _x.left_shoulder.y, _x.left_shoulder.z, _x.left_shoulder.confidence, _x.left_elbow.part_id, _x.left_elbow.x, _x.left_elbow.y, _x.left_elbow.z, _x.left_elbow.confidence, _x.left_wrist.part_id, _x.left_wrist.x, _x.left_wrist.y, _x.left_wrist.z, _x.left_wrist.confidence, _x.right_hip.part_id, _x.right_hip.x, _x.right_hip.y, _x.right_hip.z, _x.right_hip.confidence, _x.right_knee.part_id, _x.right_knee.x, _x.right_knee.y, _x.right_knee.z, _x.right_knee.confidence, _x.right_ankle.part_id, _x.right_ankle.x, _x.right_ankle.y, _x.right_ankle.z, _x.right_ankle.confidence, _x.left_hip.part_id, _x.left_hip.x, _x.left_hip.y, _x.left_hip.z, _x.left_hip.confidence, _x.left_knee.part_id, _x.left_knee.x, _x.left_knee.y, _x.left_knee.z, _x.left_knee.confidence, _x.left_ankle.part_id, _x.left_ankle.x, _x.left_ankle.y, _x.left_ankle.z, _x.left_ankle.confidence, _x.right_eye.part_id, _x.right_eye.x, _x.right_eye.y, _x.right_eye.z, _x.right_eye.confidence, _x.left_eye.part_id, _x.left_eye.x, _x.left_eye.y, _x.left_eye.z, _x.left_eye.confidence, _x.right_ear.part_id, _x.right_ear.x, _x.right_ear.y, _x.right_ear.z, _x.right_ear.confidence, _x.left_ear.part_id, _x.left_ear.x, _x.left_ear.y, _x.left_ear.z, _x.left_ear.confidence,) = _get_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f = None
def _get_struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f():
    global _struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f
    if _struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f is None:
        _struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f = struct.Struct("<2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f")
    return _struct_2I4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4fI4f
