# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tfpose_ros/Persons3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tfpose_ros.msg
import std_msgs.msg

class Persons3D(genpy.Message):
  _md5sum = "c752c4c2da8af796a9eef30d5dcd52c0"
  _type = "tfpose_ros/Persons3D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Person3D[] persons
uint32 image_w
uint32 image_h
Header header
================================================================================
MSG: tfpose_ros/Person3D
uint32 person_id
BodyPartElm3D nose
BodyPartElm3D neck
BodyPartElm3D right_shoulder
BodyPartElm3D right_elbow
BodyPartElm3D right_wrist
BodyPartElm3D left_shoulder
BodyPartElm3D left_elbow
BodyPartElm3D left_wrist
BodyPartElm3D right_hip
BodyPartElm3D right_knee
BodyPartElm3D right_ankle
BodyPartElm3D left_hip
BodyPartElm3D left_knee
BodyPartElm3D left_ankle
BodyPartElm3D right_eye
BodyPartElm3D left_eye
BodyPartElm3D right_ear
BodyPartElm3D left_ear
================================================================================
MSG: tfpose_ros/BodyPartElm3D
uint32 part_id
float32 x
float32 y
float32 z
float32 confidence
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['persons','image_w','image_h','header']
  _slot_types = ['tfpose_ros/Person3D[]','uint32','uint32','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       persons,image_w,image_h,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Persons3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.persons is None:
        self.persons = []
      if self.image_w is None:
        self.image_w = 0
      if self.image_h is None:
        self.image_h = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.persons = []
      self.image_w = 0
      self.image_h = 0
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        buff.write(_get_struct_I().pack(val1.person_id))
        _v1 = val1.nose
        _x = _v1
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v2 = val1.neck
        _x = _v2
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v3 = val1.right_shoulder
        _x = _v3
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v4 = val1.right_elbow
        _x = _v4
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v5 = val1.right_wrist
        _x = _v5
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v6 = val1.left_shoulder
        _x = _v6
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v7 = val1.left_elbow
        _x = _v7
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v8 = val1.left_wrist
        _x = _v8
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v9 = val1.right_hip
        _x = _v9
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v10 = val1.right_knee
        _x = _v10
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v11 = val1.right_ankle
        _x = _v11
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v12 = val1.left_hip
        _x = _v12
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v13 = val1.left_knee
        _x = _v13
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v14 = val1.left_ankle
        _x = _v14
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v15 = val1.right_eye
        _x = _v15
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v16 = val1.left_eye
        _x = _v16
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v17 = val1.right_ear
        _x = _v17
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v18 = val1.left_ear
        _x = _v18
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
      _x = self
      buff.write(_get_struct_5I().pack(_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.persons is None:
        self.persons = None
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = tfpose_ros.msg.Person3D()
        start = end
        end += 4
        (val1.person_id,) = _get_struct_I().unpack(str[start:end])
        _v19 = val1.nose
        _x = _v19
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v20 = val1.neck
        _x = _v20
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v21 = val1.right_shoulder
        _x = _v21
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v22 = val1.right_elbow
        _x = _v22
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v23 = val1.right_wrist
        _x = _v23
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v24 = val1.left_shoulder
        _x = _v24
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v25 = val1.left_elbow
        _x = _v25
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v26 = val1.left_wrist
        _x = _v26
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v27 = val1.right_hip
        _x = _v27
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v28 = val1.right_knee
        _x = _v28
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v29 = val1.right_ankle
        _x = _v29
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v30 = val1.left_hip
        _x = _v30
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v31 = val1.left_knee
        _x = _v31
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v32 = val1.left_ankle
        _x = _v32
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v33 = val1.right_eye
        _x = _v33
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v34 = val1.left_eye
        _x = _v34
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v35 = val1.right_ear
        _x = _v35
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v36 = val1.left_ear
        _x = _v36
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        self.persons.append(val1)
      _x = self
      start = end
      end += 20
      (_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        buff.write(_get_struct_I().pack(val1.person_id))
        _v37 = val1.nose
        _x = _v37
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v38 = val1.neck
        _x = _v38
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v39 = val1.right_shoulder
        _x = _v39
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v40 = val1.right_elbow
        _x = _v40
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v41 = val1.right_wrist
        _x = _v41
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v42 = val1.left_shoulder
        _x = _v42
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v43 = val1.left_elbow
        _x = _v43
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v44 = val1.left_wrist
        _x = _v44
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v45 = val1.right_hip
        _x = _v45
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v46 = val1.right_knee
        _x = _v46
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v47 = val1.right_ankle
        _x = _v47
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v48 = val1.left_hip
        _x = _v48
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v49 = val1.left_knee
        _x = _v49
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v50 = val1.left_ankle
        _x = _v50
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v51 = val1.right_eye
        _x = _v51
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v52 = val1.left_eye
        _x = _v52
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v53 = val1.right_ear
        _x = _v53
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
        _v54 = val1.left_ear
        _x = _v54
        buff.write(_get_struct_I4f().pack(_x.part_id, _x.x, _x.y, _x.z, _x.confidence))
      _x = self
      buff.write(_get_struct_5I().pack(_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.persons is None:
        self.persons = None
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = tfpose_ros.msg.Person3D()
        start = end
        end += 4
        (val1.person_id,) = _get_struct_I().unpack(str[start:end])
        _v55 = val1.nose
        _x = _v55
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v56 = val1.neck
        _x = _v56
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v57 = val1.right_shoulder
        _x = _v57
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v58 = val1.right_elbow
        _x = _v58
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v59 = val1.right_wrist
        _x = _v59
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v60 = val1.left_shoulder
        _x = _v60
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v61 = val1.left_elbow
        _x = _v61
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v62 = val1.left_wrist
        _x = _v62
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v63 = val1.right_hip
        _x = _v63
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v64 = val1.right_knee
        _x = _v64
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v65 = val1.right_ankle
        _x = _v65
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v66 = val1.left_hip
        _x = _v66
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v67 = val1.left_knee
        _x = _v67
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v68 = val1.left_ankle
        _x = _v68
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v69 = val1.right_eye
        _x = _v69
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v70 = val1.left_eye
        _x = _v70
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v71 = val1.right_ear
        _x = _v71
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        _v72 = val1.left_ear
        _x = _v72
        start = end
        end += 20
        (_x.part_id, _x.x, _x.y, _x.z, _x.confidence,) = _get_struct_I4f().unpack(str[start:end])
        self.persons.append(val1)
      _x = self
      start = end
      end += 20
      (_x.image_w, _x.image_h, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4f = None
def _get_struct_I4f():
    global _struct_I4f
    if _struct_I4f is None:
        _struct_I4f = struct.Struct("<I4f")
    return _struct_I4f
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
